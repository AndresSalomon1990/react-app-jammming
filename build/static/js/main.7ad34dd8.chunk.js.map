{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","SearchBar","props","search","bind","handleTermChange","state","term","this","onSearch","e","setState","target","value","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","buttonMinus","buttonPlus","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","catch","err","console","log","App","updatePlaylistName","playlistName","find","savedTrack","push","splice","indexOf","newPlaylistName","searchTerm","class","ReactDOM","render","document","getElementById","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"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","file":"static/js/main.7ad34dd8.chunk.js","sourcesContent":["const clientId = \"d0e0d47c5dfc464aa56a7d636c631298\";\r\nconst redirectUri = \"https://react-app-jammming.surge.sh\";\r\n\r\nlet accessToken;\r\n\r\nexport const Spotify = {\r\n    getAccessToken() {\r\n        if (accessToken) {\r\n            return accessToken;\r\n        }\r\n\r\n        // check for an access token match - match() return an array with the values found\r\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n        if (accessTokenMatch && expiresInMatch) {\r\n            accessToken = accessTokenMatch[1];\r\n            const expiresIn = Number(expiresInMatch[1]);\r\n            \r\n            // this clears the parameters, allowing us to grab a new access token when it expires\r\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n            window.history.pushState('Access Token', null, '/');\r\n\r\n            return accessToken;\r\n        } else {\r\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n            window.location = accessUrl;\r\n        }\r\n    },\r\n\r\n    search(term) {\r\n        const accessToken = Spotify.getAccessToken();\r\n\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, \r\n            { headers: {\r\n                Authorization: `Bearer ${accessToken}`\r\n        }}).then(response => {\r\n            return response.json();\r\n        }).then(jsonResponse => {\r\n            // if nothing comes from SPOTIFY API then return an empty array\r\n            if (!jsonResponse) {\r\n                return [];\r\n            }\r\n\r\n            return jsonResponse.tracks.items.map(track => ({\r\n                id: track.id,\r\n                name: track.name,\r\n                artist: track.artists[0].name,\r\n                album: track.album.name,\r\n                uri: track.uri\r\n            }));\r\n        });  \r\n    },\r\n\r\n    savePlaylist(name, trackUris) {\r\n        if(!name || !trackUris.length) {\r\n            return;\r\n        }\r\n\r\n        const accessToken = Spotify.getAccessToken();\r\n        const headers = { Authorization: `Bearer ${accessToken}` };\r\n        let userId;\r\n\r\n        return fetch(\"https://api.spotify.com/v1/me\", { headers: headers })\r\n                .then(response => response.json())\r\n                .then(jsonResponse => {\r\n                    userId = jsonResponse.id;\r\n\r\n                    return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, \r\n                    {\r\n                        headers: headers,\r\n                        method: \"POST\",\r\n                        body: JSON.stringify({ name: name })\r\n                    }).then(response => response.json())\r\n                        .then(jsonResponse => {\r\n                            const playlistId = jsonResponse.id;\r\n\r\n                            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, \r\n                            {\r\n                                headers: headers,\r\n                                method: \"POST\",\r\n                                body: JSON.stringify({ uris: trackUris })\r\n                            });\r\n                        });\r\n                }).catch(err => console.log(err));\r\n    }\r\n}","import React from \"react\";\r\nimport \"./SearchBar.css\";\r\n\r\nexport class SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.search = this.search.bind(this);\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n\r\n        this.state = {\r\n            term: \"\"\r\n        }\r\n    }\r\n\r\n    search() {\r\n        this.props.onSearch(this.state.term);\r\n    }\r\n\r\n    handleTermChange(e) {\r\n        this.setState({ term: e.target.value })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n                <input placeholder=\"Enter A Song, Album, or Artist\" \r\n                    onChange={this.handleTermChange} />\r\n                <button className=\"SearchButton\" onClick={this.search} >SEARCH</button>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport \"./Track.css\";\r\n\r\nexport class Track extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.addTrack = this.addTrack.bind(this);\r\n        this.removeTrack = this.removeTrack.bind(this);\r\n    }\r\n\r\n    renderAction() {\r\n        const buttonMinus = <button className=\"Track-action\" onClick={this.removeTrack}>-</button>;\r\n        const buttonPlus = <button className=\"Track-action\" onClick={this.addTrack}>+</button>;\r\n\r\n        if(this.props.isRemoval) {\r\n            return buttonMinus;\r\n        } else {\r\n            return buttonPlus;\r\n        }\r\n    }\r\n\r\n    addTrack() {\r\n        this.props.onAdd(this.props.track);\r\n    }\r\n\r\n    removeTrack() {\r\n        this.props.onRemove(this.props.track);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Track\">\r\n                <div className=\"Track-information\">\r\n                    <h3>{this.props.track.name}</h3>\r\n                    <p>{this.props.track.artist} | {this.props.track.album}</p>\r\n                </div>\r\n                {this.renderAction()}\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport \"./TrackList.css\";\r\nimport { Track } from \"../Track/Track\";\r\n\r\nexport class TrackList extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"TrackList\">\r\n                {\r\n                    this.props.tracks.map(track => {\r\n                        return <Track track={track} \r\n                                    key={track.id} \r\n                                    onAdd={this.props.onAdd}\r\n                                    onRemove={this.props.onRemove}\r\n                                    isRemoval={this.props.isRemoval}\r\n                                />\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport \"./SearchResults.css\";\r\nimport { TrackList } from \"../TrackList/TrackList\";\r\n\r\nexport class SearchResults extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"SearchResults\">\r\n                <h2>Results</h2>\r\n                <TrackList tracks={this.props.searchResults} \r\n                    onAdd={this.props.onAdd} \r\n                    isRemoval={false} />\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport \"./Playlist.css\";\r\nimport { TrackList } from \"../TrackList/TrackList\";\r\n\r\nexport class Playlist extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n    }\r\n\r\n    handleNameChange(e) {\r\n        this.props.onNameChange(e.target.value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Playlist\">\r\n                <input defaultValue={\"New Playlist\"} \r\n                    onChange={this.handleNameChange} />\r\n                <TrackList tracks={this.props.playlistTracks} \r\n                    onRemove={this.props.onRemove}\r\n                    isRemoval={true} />\r\n                <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport './App.css';\nimport { SearchBar } from \"../SearchBar/SearchBar\";\nimport { SearchResults } from \"../SearchResults/SearchResults\";\nimport { Playlist } from \"../Playlist/Playlist\";\n\nimport { Spotify } from \"../../util/Spotify\";\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.addTrack = this.addTrack.bind(this);\n\t\tthis.removeTrack = this.removeTrack.bind(this);\n\t\tthis.updatePlaylistName = this.updatePlaylistName.bind(this);\n\t\tthis.savePlaylist = this.savePlaylist.bind(this);\n\t\tthis.search = this.search.bind(this);\n\t\tthis.state = { \n\t\t\tsearchResults: [],\n\t\t\tplaylistName: \"My Playlist\",\n\t\t\tplaylistTracks: []\n\t\t}\n\t}\n\n\taddTrack(track) {\n\t\tlet tracks = this.state.playlistTracks;\n\n\t\tif (tracks.find(savedTrack => savedTrack.id === track.id )) {\n\t\t\treturn;\n\t\t}\n\n\t\ttracks.push(track);\n\t\tthis.setState( { playlistTracks: tracks } );\n\t}\n\n\tremoveTrack(track) {\n\t\tlet tracks = this.state.playlistTracks;\n\n\t\ttracks.splice(tracks.indexOf(track.id), 1);\n\n\t\tthis.setState( { playlistTracks: tracks } );\n\t}\n\n\tupdatePlaylistName(newPlaylistName) {\n\t\tthis.setState({ playlistName: newPlaylistName});\n\t}\n\n\tsavePlaylist() {\n\t\tconst trackUris = this.state.playlistTracks.map(track => track.uri);\n\n\t\tSpotify.savePlaylist(this.state.playlistName, trackUris)\n\t\t\t.then(() => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tplaylistName: \"New Playlist\",\n\t\t\t\t\tplaylistTracks: []\n\t\t\t\t});\n\t\t\t});\n\t}\n\n\tsearch(searchTerm) {\n\t\tSpotify.search(searchTerm).then(searchResults => {\n\t\t\tthis.setState({ searchResults: searchResults })\n\t\t})\n\t}\n\n\trender() {\n\t\treturn (\n\t\t<div>\n\t\t\t<h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n\t\t\t<div class=\"App\">\n\t\t\t\t<SearchBar onSearch={this.search} />\n\t\t\t\t<div className=\"App-playlist\">\n\t\t\t\t\t<SearchResults searchResults={this.state.searchResults} \n\t\t\t\t\t\tonAdd={this.addTrack} />\n\t\t\t\t\t<Playlist playlistName={this.state.playlistName} \n\t\t\t\t\t\tplaylistTracks={this.state.playlistTracks} \n\t\t\t\t\t\tonRemove={this.removeTrack} \n\t\t\t\t\t\tonNameChange={this.updatePlaylistName} \n\t\t\t\t\t\tonSave={this.savePlaylist} />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t);\n\t}\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}